# -*- coding: utf-8 -*-
"""Prediksi-nilai-tanah-RF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-hBH-khZo8U4hRSth7fKgltHGxsSkKW
"""

import pandas as pd
import numpy as np
import random
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# 1. Atur seed acak
seed = 42
np.random.seed(seed)
random.seed(seed)
os.environ['PYTHONHASHSEED'] = str(seed)

# 2. Load data
data = pd.read_csv('/content/drive/MyDrive/TUGAS AKHIR/DATA/Variabel_ANN.csv')

# 3. Mapping Kategori
zonasi_mapping = {
    "lindung dan sempadan": 1,
    "pertanian": 2,
    "permukiman": 3,
    "industri": 4,
    "perdagangan dan jasa": 5
}

kls_jalan_mapping = {
    "jalan setapak": 1,
    "jalan lokal sekunder": 2,
    "jalan lokal primer": 3,
    "jalan kolektor sekunder": 4,
    "jalan kolektor primer": 5,
    "jalan arteri sekunder": 6,
    "jalan arteri primer": 7,
    "jalan tol": 8}

ltktnh_mapping = {
    "lain-lain": 1,
    "tusuk sate": 2,
    "normal": 3,
    "hook": 4
}

# 4. Mapping kategori
data['Zonasi'] = data['Zonasi'].astype(str).str.lower().map(zonasi_mapping)
data['Kls_Jalan'] = data['Kls_Jalan'].astype(str).str.lower().map(kls_jalan_mapping)
data['Ltk_Tnh'] = data['Ltk_Tnh'].astype(str).str.lower().map(ltktnh_mapping)

# 5. Pisahkan fitur dan target
drop_cols = ['ID', 'KOOR_X', 'KOOR_Y', 'ZNT_2024']
if 'ZNT_2023' in data.columns:
    drop_cols.append('ZNT_2023')
if 'ZNT_2022' in data.columns:
    drop_cols.append('ZNT_2022')

X = data.drop(columns=drop_cols)
y = data['ZNT_2024']
# 6. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)

# 7. Model Random Forest
rf_model = RandomForestRegressor(
    n_estimators=100,
    max_depth=20,
    min_samples_split=10,
    min_samples_leaf=5,
    random_state=seed
)

# 8. Latih model
rf_model.fit(X_train, y_train)

# 9. Prediksi Train dan Test
y_train_pred = rf_model.predict(X_train)
y_test_pred = rf_model.predict(X_test)

import matplotlib.pyplot as plt

# 10. Evaluasi Train
mse_train = mean_squared_error(y_train, y_train_pred)
rmse_train = np.sqrt(mse_train)
mae_train = mean_absolute_error(y_train, y_train_pred)
mape_train = np.mean(np.abs((y_train - y_train_pred) / y_train)) * 100
accuracy_train = 100 - mape_train
r2_train = r2_score(y_train, y_train_pred)

# 11. Evaluasi Test
mse_test = mean_squared_error(y_test, y_test_pred)
rmse_test = np.sqrt(mse_test)
mae_test = mean_absolute_error(y_test, y_test_pred)
mape_test = np.mean(np.abs((y_test - y_test_pred) / y_test)) * 100
accuracy_test = 100 - mape_test
r2_test = r2_score(y_test, y_test_pred)

# 12. Print hasil
print("=== Performansi Data Train ===")
print(f'MSE        : {mse_train:.2f}')
print(f'RMSE       : {rmse_train:.2f}')
print(f'MAE        : {mae_train:.2f}')
print(f'MAPE       : {mape_train:.2f}%')
print(f'Accuracy   : {accuracy_train:.2f}%')
print(f'R2 Score   : {r2_train:.4f}')

print("\n=== Performansi Data Test ===")
print(f'MSE        : {mse_test:.2f}')
print(f'RMSE       : {rmse_test:.2f}')
print(f'MAE        : {mae_test:.2f}')
print(f'MAPE       : {mape_test:.2f}%')
print(f'Accuracy   : {accuracy_test:.2f}%')
print(f'R2 Score   : {r2_test:.4f}')
# ================== Prediksi seluruh data ==================
data['ZNT_2024_PREDIKSI_RF'] = rf_model.predict(X)
from sklearn.inspection import permutation_importance


# Hitung PFI pada data test
pfi = permutation_importance(
    rf_model, X_test, y_test,
    n_repeats=10,
    random_state=seed,
    scoring='neg_mean_squared_error'
)

# Buat DataFrame untuk PFI
pfi_df = pd.DataFrame({
    'Fitur': X.columns,
    'Importance': pfi.importances_mean
}).sort_values(by='Importance', ascending=False)

# Tampilkan
print("\n=== Permutation Feature Importance (PFI) ===")
print(pfi_df)

# Visualisasi PFI
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.barh(pfi_df['Fitur'], pfi_df['Importance'], color='skyblue')
plt.xlabel('Mean Importance (Neg MSE)')
plt.title('Permutation Feature Importance - Random Forest')
plt.gca().invert_yaxis()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
# Ambil MDI dari feature_importances_
mdi_importance = rf_model.feature_importances_
mdi_df = pd.DataFrame({
    'Fitur': X.columns,
    'Importance': mdi_importance
}).sort_values(by='Importance', ascending=False)

# Tampilkan
print("\n=== Mean Decrease in Impurity (MDI) ===")
print(mdi_df)

# Visualisasi MDI
plt.figure(figsize=(10, 6))
plt.barh(mdi_df['Fitur'], mdi_df['Importance'], color='salmon')
plt.xlabel('Feature Importance (MDI)')
plt.title('Mean Decrease in Impurity - Random Forest')
plt.gca().invert_yaxis()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()